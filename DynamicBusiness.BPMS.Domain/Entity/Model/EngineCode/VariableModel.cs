using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DynamicBusiness.BPMS.Domain
{
    public class VariableModel
    {
        /// <summary>
        /// this is variable name.
        /// </summary>
        public string Name { get; set; }
        private List<DataModel> ListDataModel { get; set; }

        public List<DataModel> Items { get { return this.ListDataModel; } }
        public object Value
        {
            get
            {
                return this.ListDataModel.Any() ? this.ListDataModel.FirstOrDefault().Value : null;
            }
        }

        public VariableModel(string name, List<DataModel> dataModel)
        {
            this.Name = name;
            this.ListDataModel = dataModel ?? new List<DataModel>();
        }
        public VariableModel(string name, DataModel dataModel)
        {
            this.Name = name;
            this.ListDataModel = dataModel != null ? new List<DataModel>() { dataModel } : new List<DataModel>();
        }
        public VariableModel(string name)
        {
            this.Name = name;
            this.ListDataModel = new List<DataModel>();
        }

        public T GetValue<T>(string name)
        {
            if (this.ListDataModel.Any())
                return this.ListDataModel.FirstOrDefault().GetValue<T>(name);
            else return default(T);
        }
        public bool ContainsKey(string name)
        {
            return this.ListDataModel.Any() && this.ListDataModel.FirstOrDefault().ContainsKey(name);
        }
        public object this[string name]
        {
            get
            {
                if (this.ListDataModel.Any())
                    return this.ListDataModel.FirstOrDefault()[name];
                else return null;
            }
            set
            {
                if (this.ListDataModel.Any())
                    this.ListDataModel.FirstOrDefault()[name] = value;
            }
        }
         
        public static implicit operator VariableModel(DataTable dataTable)
        {
            VariableModel variableModel = new VariableModel(
                dataTable.TableName.ToStringObj().Replace("Bpms_", ""),
                dataTable.Rows.Cast<DataRow>().Select(c => new DataModel(c)).ToList());
            return variableModel;
        }

        /// <summary>
        /// it is used to convert variableModel to list of entityDef dynamic object .
        /// </summary>
        /// <typeparam name="T">is entityDef class generated by engine.</typeparam>
        public static List<T> ConvertToList<T>(VariableModel variableModel)
        {
            if (variableModel == null) return default(List<T>);
            List<T> list = new List<T>();
            foreach (var varModel in variableModel.Items)
            {
                foreach (var item in varModel.ToList())
                {
                    var instance = Activator.CreateInstance(typeof(T));
                    if (instance.GetType().GetProperty(item.Key) != null)
                        instance.GetType().GetProperty(item.Key).SetValue(instance, item.Value);
                    list.Add((T)instance);
                }
            }
            return list;
        }

        /// <summary>
        /// it is used to convert variableModel to entityDef dynamic object .
        /// </summary>
        /// <typeparam name="T">is entityDef class generated by engine.</typeparam>
        public static T ConvertTo<T>(VariableModel variableModel)
        {
            var instance = Activator.CreateInstance(typeof(T));
            if (variableModel == null) return default(T);
            //set the name of variable
            instance.GetType().GetProperty("VariableName").SetValue(instance, variableModel.Name);
            //set the values of variables
            if (variableModel.Items?.Any() == true)
                foreach (var item in variableModel.Items.FirstOrDefault().ToList())
                {
                    if (instance.GetType().GetProperty(item.Key) != null)
                        instance.GetType().GetProperty(item.Key).SetValue(instance, item.Value);
                }
            return (T)instance;
        }

        /// <summary>
        /// it is used to convert entityDef dynamic object to variableModel.
        /// </summary>
        /// <typeparam name="T">is entityDef class generated by engine.</typeparam>
        public static VariableModel ConvertFrom<T>(T entityObj)
        {
            if (entityObj == null) return null;
            DataModel dataModel = new DataModel();
            string varName = string.Empty;
            foreach (string pn in entityObj.GetType().GetProperties().Where(c => c.PropertyType.IsSerializable).Select(c => c.Name))
            {
                if ("VariableName" == pn)
                    varName = entityObj.GetType().GetProperty(pn).GetValue(entityObj).ToStringObj();

                if (entityObj.GetType().GetProperty(pn) != null)
                    dataModel[pn] = entityObj.GetType().GetProperty(pn).GetValue(entityObj);
            }

            return new VariableModel(varName, dataModel);
        }

        /// <summary>
        /// it is used to convert list of entityDef dynamic object to variableModel.
        /// </summary>
        /// <typeparam name="T">is entityDef class generated by engine.</typeparam>
        public static VariableModel ConvertFrom<T>(List<T> entityObj)
        {
            if (entityObj == null) return null;
            string varName = string.Empty;
            List<DataModel> listDataModel = new List<DataModel>();
            foreach (var item in entityObj)
            {
                DataModel dataModel = new DataModel();
                foreach (string pn in item.GetType().GetProperties().Where(c => c.PropertyType.IsSerializable).Select(c => c.Name))
                {
                    if (nameof(VariableModel.Name) == pn)
                        varName = item.GetType().GetProperty(pn).GetValue(item).ToStringObj();

                    if (item.GetType().GetProperty(pn) != null)
                        dataModel[pn] = item.GetType().GetProperty(pn).GetValue(item);
                }
                listDataModel.Add(dataModel);
            }

            return new VariableModel(varName, listDataModel);
        }
    }
}
